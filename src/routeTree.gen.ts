/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as RedirectImport } from './routes/redirect'
import { Route as NotesImport } from './routes/notes'
import { Route as IndexImport } from './routes/index'
import { Route as NotesIndexImport } from './routes/notes/index'
import { Route as NotesCreateImport } from './routes/notes/create'
import { Route as NotesEditIdImport } from './routes/notes/edit/$id'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const RedirectRoute = RedirectImport.update({
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const NotesRoute = NotesImport.update({
  path: '/notes',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NotesIndexRoute = NotesIndexImport.update({
  path: '/',
  getParentRoute: () => NotesRoute,
} as any)

const NotesCreateRoute = NotesCreateImport.update({
  path: '/create',
  getParentRoute: () => NotesRoute,
} as any)

const NotesEditIdRoute = NotesEditIdImport.update({
  path: '/edit/$id',
  getParentRoute: () => NotesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/notes': {
      id: '/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/notes/create': {
      id: '/notes/create'
      path: '/create'
      fullPath: '/notes/create'
      preLoaderRoute: typeof NotesCreateImport
      parentRoute: typeof NotesImport
    }
    '/notes/': {
      id: '/notes/'
      path: '/'
      fullPath: '/notes/'
      preLoaderRoute: typeof NotesIndexImport
      parentRoute: typeof NotesImport
    }
    '/notes/edit/$id': {
      id: '/notes/edit/$id'
      path: '/edit/$id'
      fullPath: '/notes/edit/$id'
      preLoaderRoute: typeof NotesEditIdImport
      parentRoute: typeof NotesImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  NotesRoute: NotesRoute.addChildren({
    NotesCreateRoute,
    NotesIndexRoute,
    NotesEditIdRoute,
  }),
  RedirectRoute,
  SettingsRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/notes",
        "/redirect",
        "/settings"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/notes": {
      "filePath": "notes.tsx",
      "children": [
        "/notes/create",
        "/notes/",
        "/notes/edit/$id"
      ]
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/notes/create": {
      "filePath": "notes/create.tsx",
      "parent": "/notes"
    },
    "/notes/": {
      "filePath": "notes/index.tsx",
      "parent": "/notes"
    },
    "/notes/edit/$id": {
      "filePath": "notes/edit/$id.tsx",
      "parent": "/notes"
    }
  }
}
ROUTE_MANIFEST_END */
